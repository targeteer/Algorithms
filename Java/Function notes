1. 함수의 개념 및 예제1
- 값을 입력받아 특정 연산을 수행하여 결과를 반환환

2. 함수의 용어
- 함수의 기본 형태 및 용어 

반환 형(return type)
숫자를 반환->int getSum<-함수이름 (int a, int b, int c)<-인자{
    return a+b+c; body(몸)
}

3. 함수의 실행예제
- 모든 프로그램은 main함수가 무조건 먼저 실행

4. Scope의 의미
- 변수는 선언된 블록 내에서만 접근할 수 있다
- 함수간 작업의 완벽한 분담을 위해 존재함
    -> 서로 영향을 전혀 끼치지 않음 / 서로가 독립된 상태
- 완벽한 작업 분담
대장 - A, B, C, D에 각각 집안일 한개 씩 시킴
int main(){
    WaterPot();
    CleanRoom();
    WalkDog();
    WashingDish();
}
int WaterPot() {

}
int CleanRoom() {

}
int WalkDog() {

}
int WashingDish() {

}



32. 재귀함수의 정의
* 함수 요약
- 함수의 기본 형태
    반환 형, 함수 이름, 인자, 값 반환
- 스코프는 함수간 작업의 완벽한 분담을 위해 존재한다
- 의미단위의 프로그래밍을 해야한다.

* 재귀함수
- 자기 자신을 부르는 함수
ex)
int main(){
    main();

    return 0;
}

33. 재귀함수가 의미있는 예제 및 구현
int getFactorial(int n){
    if(n == 0)
        return 1;
    else
        return n + getFactorial(n-1);
}
int main() {
    int n;
    scan("%d", &n);
    printf("%d\n", getFactorial(n));
}

-> getFactorial(4)+getFactorial(3)+getFactorial(2)+getFactorial(1)+getFactorial(0)
-> 4*3*2*1*1

35. 값의 계산을 위한 두가지 방법
재귀 함수를 이해하기 위한 질문
- 재귀함수의 의미는 무엇인가? 도대체 이걸 왜 쓰나?
- 재귀함수를 만들기 위해서는 어떤 절차를 따라야 하나?

재귀함수의 의미
- 귀납적 계산 방법

두 가지 계산 방법
- 순차적 계산법
    A를 계산한다.
    A를 이용해서 B를 계산한다.
    ...
    C를 이용해서 D를 계산함으로써 원하는 결과를 얻는다.
    ex) 4의 약수의 개수를 구하라
    -> C에 0을 넣는다
    4가 1로 나누어 떨어지면 C에 1을 더한다
    ...
    4가 4로 나누어 떨어지면 C에 1을 더한다.

- 귀납적 계산법
    구하려고 하는 값을 f(x)라고 하자.
    f(x)를 구하기 위하여 또 다시 f(x)를 활용한다. 
        -> factorial의 정의는
        -> n! = n * (n-1)!
    즉, "나"를 계산하기 위해 또 다시 "나"를 활용한다.

36. 귀납적 계산법 내의 가정관계
- 귀납적 계산법의 깊은 이해
* n^m을 귀납적으로 계산하여라
n^m = (여기에 내가 또 들어가야함)
    = n^(m-1) * n, n^0 = 1

왜 귀납적 계산법이 제대로 된 값을 반환하는가?
1) 수많은 가정을 하다가
2) 맨 끝에는 정확한 값이 있기 때문이다. 

37. 재귀함수와 재귀적 계산법

38. 수학적 귀납법
* 명제 P(n)이 모든 자연수 n에 대하여 성립함을 보이자
* 증명 순서
    - P(1)이 참임을 보인다.
    - P(k)가 성립한다고 가정한 후, P(k+1)이 성립함을 보인다.
    - 따라서 모든 자연수 n에 대하여 P(n)이 성립한다.

수학적 귀납법의 예
* 명제 : 모든 자연수 n에 대하여 다음이 성립함을 보여라
1+2+...+n = n(n+1)/2
    P(1)이 성립함을 보인다
    P(k)가 성립한다고 가정한 후, P(k+1)이 성립함을 보인다. 

39. 재귀함수의 정확성 증명


40. 재귀함수 디자인의 절차
* 재귀함수 디자인을 위한 3가지 절차
1) 함수의 역할을 말로 정확하게 정의한다.
2) 기저조건(Base condition) = 제일 단순한 경우에서 제대로 동작함을 보인다.
getFactorial 경우 인자가 0일 때
3) 함수가 (작은 input에 대하여) 제대로 동작한다고 가정하고 함수를 완성한다.

        
41. 예제1) 거듭제곱 구하기 1
- n^m을 재귀함수를 이용하여 계산하여라
    getPower(n,m) = n^m을 반환하는 함수
- 기저 조건 : getPower(n,0) = 1
- getPower(n,m) = getPower(n,m-1) * n

42. 거듭제곱 구하기 2

int getPower(int n, int m){
    // n^m을 반환하는 함수(함수의 역할을 써놓을 것)
    if(m == 0)
        return 1;
    else
        return getPower(n, m-1) * n;
}